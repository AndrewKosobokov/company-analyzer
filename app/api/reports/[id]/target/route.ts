import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Extract key sections from full analysis report to keep prompt focused
function extractKeySections(reportText: string) {
  const sections = {
    companyInfo: '',
    keyRecommendations: '',
    insights: ''
  };

  const headerMatch = reportText.match(/^([\s\S]*?)(?=##)/);
  if (headerMatch) {
    sections.companyInfo = headerMatch[1].trim();
  }

  const keyRecsMatch = reportText.match(/## –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò[\s\S]*?(?=##|$)/);
  if (keyRecsMatch) {
    sections.keyRecommendations = keyRecsMatch[0];
  }

  const insightsMatch = reportText.match(/## –ò–ù–°–ê–ô–¢–´ –ò –°–¢–†–ê–¢–ï–ì–ò–Ø –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø[\s\S]*?(?=##|$)/);
  if (insightsMatch) {
    sections.insights = insightsMatch[0];
  }

  return sections;
}

const TARGET_PROPOSAL_PROMPT = `
–í–ê–ñ–ù–û: –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç –°–†–ê–ó–£ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞. –ë–ï–ó –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–û—Ç–ª–∏—á–Ω–æ, –∑–∞–¥–∞—á–∞ —è—Å–Ω–∞", "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª", "–•–æ—Ä–æ—à–æ, —Å–æ–∑–¥–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" –∏ —Ç.–ø.

–ö–¢–û –¢–´ –ò –ß–¢–û –î–ï–õ–ê–¢–¨

–¢–≤–æ—è —Ä–æ–ª—å: –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è–º –Ω–∞–ª–∞–¥–∏—Ç—å B2B-–∑–∞–∫—É–ø–∫–∏.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ –∑–∞–≤–æ–¥–µ (–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏).

–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å (—Ä–µ–∑—É–ª—å—Ç–∞—Ç): –ù–∞–ø–∏—à–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (—Å–µ–π–ª–∑–∞) –ø–æ–Ω—è—Ç–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é "–≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞".

–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ: –° —ç—Ç–∏–º "–≤–∞—Ä–∏–∞–Ω—Ç–æ–º" –º–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç –≤–ø–µ—Ä–≤—ã–µ –∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –ø–∏—Å–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–∏–∫—É –æ—Ç–¥–µ–ª–∞ —Å–Ω–∞–±–∂–µ–Ω–∏—è (–∑–∞–∫—É–ø—â–∏–∫—É) –Ω–∞ —ç—Ç–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏.

–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å: –ü–æ–º–æ—á—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ–±—è –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –Ω–µ –ø—Ä–æ—Å—Ç–æ "–ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–æ–ª—Ç—ã" (–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É), –∞ –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Ö –æ—Ç–¥–µ–ª–∞ —Å–Ω–∞–±–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—á–Ω—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å, —Ä–∏—Å–∫–∏ —Å—Ä—ã–≤–∞ –ø–æ—Å—Ç–∞–≤–æ–∫, –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å).

–ü–õ–ê–ù –¢–í–û–ï–ì–û –û–¢–í–ï–¢–ê (–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)

–¢—ã –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É. –ù–ê–ß–ù–ò –°–†–ê–ó–£ –° –ó–ê–ì–û–õ–û–í–ö–ê:

–†–∞–∑–¥–µ–ª 1: –ö–ê–ö –ü–†–ï–î–°–¢–ê–í–ò–¢–¨–°–Ø

–ó–∞–¥–∞—á–∞: –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ–π –∏ —Å—Ä–∞–∑—É —Å–º–µ—â–∞—Ç—å —Ñ–æ–∫—É—Å —Å "–∫—É–ø–∏-–ø—Ä–æ–¥–∞–π" –Ω–∞ "—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º". –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ —Å—Ä–∞–∑—É –æ–±–æ–∑–Ω–∞—á–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–µ—Å–µ—Ç –æ—Ç–¥–µ–ª—É —Å–Ω–∞–±–∂–µ–Ω–∏—è.

–ö–∞–∫ –ù–ï –Ω–∞–¥–æ: "–Ø –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º..." (—Å–ª–∏—à–∫–æ–º –±–∞–Ω–∞–ª—å–Ω–æ), "–Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏..." (—Ñ–∞–ª—å—à–∏–≤–æ –∏ –æ—Ç–æ—Ä–≤–∞–Ω–æ –æ—Ç –∂–∏–∑–Ω–∏), "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Ä–∏—Å–∫–æ–≤..." (–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ).

–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å: –ü—Ä–µ–¥–ª–æ–∂–∏ 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≥–æ—Ç–æ–≤–æ–π —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–ò–º—è, –ö–æ–º–ø–∞–Ω–∏—è), –Ω–æ —Ç—É—Ç –∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–ª—å–∑–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–Ω–∞–±–∂–µ–Ω–∏—è.

–†–∞–∑–¥–µ–ª 2: "–ë–û–õ–¨–ù–´–ï –ú–ï–°–¢–ê" (–ù–∞ —á—Ç–æ "–Ω–∞–¥–∞–≤–∏—Ç—å" –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ)

–ó–∞–¥–∞—á–∞: –ù–∞–π–¥–∏ –≤ –æ—Ç—á–µ—Ç–µ 1-2 —Å–∞–º—ã–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Ö –æ—Ç–¥–µ–ª–∞ —Å–Ω–∞–±–∂–µ–Ω–∏—è (–Ω–µ "–∏–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–∞–µ–∫", –∞ "—É –Ω–∏—Ö —Ö–∞–æ—Å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ"). –≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç –∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∫—É—Ö–Ω—é.

–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å: –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫ –≤–µ–∂–ª–∏–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã-–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫ —É –Ω–∏—Ö –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ.

–í–∞–∂–Ω–æ: –ì–æ–≤–æ—Ä–∏–º –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –∞ –Ω–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö.

–†–∞–∑–¥–µ–ª 3: –ß–¢–û –ö–û–ù–ö–†–ï–¢–ù–û –ü–†–ï–î–õ–û–ñ–ò–¢–¨ (–ì–ª–∞–≤–Ω–∞—è –ø–æ–ª—å–∑–∞)

–ó–∞–¥–∞—á–∞: –î–∞–π 3 —á–µ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–Ω–∞–±–∂–µ–Ω—Ü–∞ –∏ –¥–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–≤–ø–∞—Ä–∏–≤–∞—Ç–µ–ª—å".

–ü–æ–ª—å–∑–∞ 1 (–†–µ—à–µ–Ω–∏–µ –±–æ–ª—å—à–æ–π –ø—Ä–æ–±–ª–µ–º—ã): –ü—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–±—Ä–∞—Ç—å —É –Ω–∏—Ö —Å–∞–º—É—é –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å ‚Äî —Ü–µ–ª—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫—É–ø–æ–∫. –ù–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –∞ –≥—Ä—É–ø–ø—É.

–ü–æ–ª—å–∑–∞ 2 (–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –∏ —Ä—É—Ç–∏–Ω—ã): –ü—Ä–µ–¥–ª–æ–∂–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ —Å–Ω–∏–º–µ—Ç —Å –Ω–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å (–ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å, –¥–µ–Ω—å–≥–∏).

–ü–æ–ª—å–∑–∞ 3 (–í—Å–µ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ): –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–º –∂–∏–∑–Ω—å, —Å—Ç–∞–≤ "–æ–¥–Ω–∏–º –æ–∫–Ω–æ–º" –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ–ª–æ—á–µ–π.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:

–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –≠–ú–û–î–ó–ò.

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.

–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.

–ü–∏—à–∏ –ø–æ –¥–µ–ª—É, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò:
{companyInfo}

{insights}

{keyRecommendations}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç –ü–†–Ø–ú–û —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞:

# –í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ {companyName}

–ó–∞—Ç–µ–º —Å–ª–µ–¥—É–π –ø–ª–∞–Ω—É —Ä–∞–∑–¥–µ–ª–æ–≤ –≤—ã—à–µ.

–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ë–ï–ó –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ë–ï–ó —Ñ—Ä–∞–∑ "–û—Ç–ª–∏—á–Ω–æ, –∑–∞–¥–∞—á–∞ —è—Å–Ω–∞", "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª". –ù–∞—á–Ω–∏ –°–†–ê–ó–£ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ "# –í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ {companyName}".
`;

export async function POST(request: NextRequest, context: { params: { id: string } }) {
  const { params } = context;
  try {
    // Authentication
    const authHeader = request.headers.get('Authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    try {
      jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    } catch {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    const analysisId = params.id;
    if (!analysisId) {
      return NextResponse.json({ error: 'Analysis ID required' }, { status: 400 });
    }

    // Load analysis from DB
    const analysis = await prisma.analysis.findUnique({
      where: { id: analysisId },
      select: { id: true, reportText: true, companyName: true, companyInn: true }
    });

    if (!analysis || !analysis.reportText) {
      return NextResponse.json({ error: 'Analysis not found' }, { status: 404 });
    }

    // Prepare prompt
    const keySections = extractKeySections(analysis.reportText);
    const prompt = TARGET_PROPOSAL_PROMPT
      .replace('{companyInfo}', keySections.companyInfo)
      .replace('{insights}', keySections.insights)
      .replace('{keyRecommendations}', keySections.keyRecommendations)
      .replace('{companyName}', analysis.companyName || '–∫–æ–º–ø–∞–Ω–∏—é');

    console.log('üìè [Target] Report length:', analysis.reportText.length);
    console.log('üìè [Target] Prompt length:', prompt.length);

    // Call Vertex AI WITHOUT Google Search
    const { callVertexAI } = await import('@/lib/vertexai');
    const ai = await callVertexAI(prompt, false);
    let proposalText = ai.text || '';

    if (!proposalText) {
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' }, { status: 500 });
    }

    // Cleanup intro phrases
    const cleanProposal = (text: string): string => {
      const introPatterns = [
        /^–û—Ç–ª–∏—á–Ω–æ[,.]?\s*–∑–∞–¥–∞—á–∞ —è—Å–Ω–∞[.!]?\s*/i,
        /^–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª[^.!\n]*[.!\n]\s*/i,
        /^–•–æ—Ä–æ—à–æ[,.]?\s*[^.!\n]*[.!\n]\s*/i,
        /^–ü–æ–Ω—è—Ç–Ω–æ[,.]?\s*[^.!\n]*[.!\n]\s*/i,
        /^–ö–æ–Ω–µ—á–Ω–æ[,.]?\s*[^.!\n]*[.!\n]\s*/i,
        /^–Ø—Å–Ω–æ[,.]?\s*[^.!\n]*[.!\n]\s*/i,
        /^–•–æ—Ä–æ—à–æ[,.]?\s*—Å–æ–∑–¥–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ[.!]?\s*/i,
        /^–°–µ–π—á–∞—Å[,.]?\s*[^.!\n]*[.!\n]\s*/i,
      ];
      for (const pattern of introPatterns) text = text.replace(pattern, '');
      text = text.replace(/^#\s*–®–ø–∞—Ä–≥–∞–ª–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤/im, '# –í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤');
      return text.trim();
    };
    proposalText = cleanProposal(proposalText);

    // Save to DB (best-effort)
    try {
      await prisma.analysis.update({
        where: { id: analysisId },
        data: { targetProposal: proposalText }
      });
    } catch (e) {
      console.warn('‚ö†Ô∏è [Target] Failed to cache proposal in DB:', e);
    }

    return NextResponse.json({ proposalText });
  } catch (error) {
    console.error('[Target API] Error:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}


