// File: app/api/analysis/report/[analysisId]/route.ts

import { NextResponse } from 'next/server';
import { NextRequest } from 'next/server';
import prisma from '@/app/lib/prisma';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
interface RouteParams {
    params: {
        analysisId: string;
    };
}

// Handler –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞)
// PUBLIC ACCESS - No authentication required for shareable links
export async function GET(req: NextRequest, { params }: RouteParams) {
    const { analysisId } = params;

    try {
        const report = await prisma.analysis.findUnique({
            where: {
                id: analysisId,
            },
            select: {
                id: true,
                companyName: true,
                companyInn: true,
                reportText: true, // –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                targetProposal: true, // –í–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–ª–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                createdAt: true,
                isDeleted: true,
            }
        });

        if (!report) {
            return NextResponse.json({ error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
        }

        // üîç DEBUG: Log if targetProposal is cached
        console.log('üìÑ [Report API] Fetching report:', analysisId);
        console.log('üìÑ [Report API] Target proposal cached:', report.targetProposal ? `YES (${report.targetProposal.length} chars)` : 'NO');

        return NextResponse.json(report, { status: 200 });

    } catch (error) {
        console.error('Fetch single report error:', error);
        return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
}