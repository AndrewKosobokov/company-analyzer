const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixHeaders() {
  console.log('üîç Searching for reports with old headers...');
  
  const analyses = await prisma.analysis.findMany({
    where: { 
      isDeleted: false,
      reportText: {
        not: null
      }
    }
  });

  console.log(`üìä Found ${analyses.length} reports to check`);

  let updated = 0;

  for (const analysis of analyses) {
    let reportText = analysis.reportText;
    let hasChanges = false;
    
    // Fix headers - remove parenthetical text
    const oldText1 = '–í—ã—è–≤–ª–µ–Ω–∏–µ –í—ã—Å–æ–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –†–µ–¥–∫–∏—Ö –ü–æ–∑–∏—Ü–∏–π (–ö–ª—é—á–µ–≤–æ–π –ü—É–Ω–∫—Ç)';
    const newText1 = '–í—ã—è–≤–ª–µ–Ω–∏–µ –í—ã—Å–æ–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –†–µ–¥–∫–∏—Ö –ü–æ–∑–∏—Ü–∏–π';
    if (reportText.includes(oldText1)) {
      reportText = reportText.replace(new RegExp(oldText1.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), newText1);
      hasChanges = true;
    }
    
    const oldText2 = '–ê–Ω–∞–ª–∏–∑ –ó–∞–∫—É–ø–æ—á–Ω–æ–π –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ü—Ä–æ—Ñ–∏–ª—å –°–Ω–∞–±–∂–µ–Ω–∏—è)';
    const newText2 = '–ê–Ω–∞–ª–∏–∑ –ó–∞–∫—É–ø–æ—á–Ω–æ–π –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏';
    if (reportText.includes(oldText2)) {
      reportText = reportText.replace(new RegExp(oldText2.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), newText2);
      hasChanges = true;
    }
    
    const oldText3 = '–ò–Ω—Å–∞–π—Ç—ã –∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–î–ª—è –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º)';
    const newText3 = '–ò–Ω—Å–∞–π—Ç—ã –∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è';
    if (reportText.includes(oldText3)) {
      reportText = reportText.replace(new RegExp(oldText3.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), newText3);
      hasChanges = true;
    }
    
    // Fix "–ó–∞–∫—É–ø" to "–ó–∞–∫—É–ø–∫–∏" in TOC or navigation
    // Only replace standalone "–ó–∞–∫—É–ø" not "–ó–∞–∫—É–ø–æ—á–Ω–æ–π" or "–ó–∞–∫—É–ø–æ–∫"
    if (reportText.includes('–ó–∞–∫—É–ø') && !reportText.includes('–ó–∞–∫—É–ø–æ—á–Ω–æ–π') && !reportText.includes('–ó–∞–∫—É–ø–æ–∫')) {
      reportText = reportText.replace(/\b–ó–∞–∫—É–ø\b/g, '–ó–∞–∫—É–ø–∫–∏');
      hasChanges = true;
    }
    
    if (hasChanges) {
      await prisma.analysis.update({
        where: { id: analysis.id },
        data: { reportText }
      });
      
      console.log(`‚úÖ Updated report: ${analysis.companyName} (ID: ${analysis.id})`);
      updated++;
    }
  }

  console.log(`\nüìà Results:`);
  console.log(`‚úÖ Updated: ${updated} reports`);
  console.log(`üìä Total checked: ${analyses.length} reports`);
  
  if (updated === 0) {
    console.log('üéâ No reports needed updating - all headers are already clean!');
  }

  await prisma.$disconnect();
}

fixHeaders().catch(console.error);



































